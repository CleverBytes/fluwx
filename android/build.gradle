import org.yaml.snakeyaml.Yaml

group 'com.jarvan.fluwx'
version '1.0-SNAPSHOT'

Map projectYaml = loadPubspec()

buildscript {
    ext.kotlin_version = '1.7.10'
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:7.3.1'
        classpath "org.yaml:snakeyaml:2.0"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
android {
    namespace "com.jarvan.fluwx"
    compileSdk 31

    sourceSets {
        main.java.srcDirs += ['src/main/kotlin',"${buildDir}/generated/main/kotlin"]
        test.java.srcDirs += 'src/test/kotlin'
    }

    defaultConfig {
        minSdkVersion 16
        consumerProguardFiles 'consumer-proguard-rules.txt'
        manifestPlaceholders = loadManifestPlaceholder(projectYaml)
    }

    dependencies {
        api 'com.tencent.mm.opensdk:wechat-sdk-android:6.8.24'
        implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4'
        implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4'
        implementation 'id.zelory:compressor:3.0.1'
        implementation 'com.squareup.okhttp3:okhttp:4.10.0'
        testImplementation 'org.jetbrains.kotlin:kotlin-test'
        testImplementation 'org.mockito:mockito-core:5.0.0'
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()

            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen { false }
                showStandardStreams = true
            }
        }
    }
}

Map loadPubspec() {
    def path = rootProject.projectDir.parent + File.separator + "pubspec.yaml"
    InputStream input = new FileInputStream(new File(path))
    Yaml yaml = new Yaml()
    Map projectConfig = yaml.load(input)

    return projectConfig
}

static def loadManifestPlaceholder(Map projectConfig) {
    String interruptWxRequest = "true"
    String flutterActivity = ""
    String debugLogging = "disabled"
    Map fluwx = (Map) projectConfig.get("fluwx")
    if (fluwx) {
        Map android = (Map) fluwx.get("android")
        if (android) {
            def iwr = android.get("interrupt_wx_request")
            if (iwr) {
                interruptWxRequest = (String) iwr
            }

            def activity = android.get("flutter_activity")
            if (activity) {
                flutterActivity = (String) activity
            }
        }

        def logging = fluwx.get("debug_logging")
        if (logging && logging == "true") {
            debugLogging = "true"
        }

    }

    return ["InterruptWeChatRequestByFluwx": interruptWxRequest,
            "FluwxFlutterActivity"         : flutterActivity,
            "WeChatDebugLogging"           : debugLogging]
}

tasks.register("generateFluwxHelperFile") {
    Map config = loadPubspec()
    Map fluwx = (Map) config.get("fluwx")

    if (fluwx) {
        String appId = (String) fluwx.get("app_id")
        if (appId == null) {
            appId = ""
        }
        File generateFolder = new File("${buildDir}/generated/main/kotlin/com/jarvan/fluwx")
        String template = "package com.jarvan.fluwx\n" +
                "// auto generated\n" +
                "internal object FluwxHelper {\n" +
                "    val appId:String =\"&&PLACEHOLDER&&\";\n" +
                "}"
        if (!generateFolder.exists()) {
            generateFolder.mkdirs()
        }

        file("${generateFolder.absolutePath}/FluwxHelper.kt").text = template.replace("&&PLACEHOLDER&&", appId)

    }

}


tasks.named("build").configure {
    dependsOn("generateFluwxHelperFile")
}